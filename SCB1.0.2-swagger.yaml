openapi: 3.0.0
servers:
  # Added by API Auto Mocking Plugin
  # Added by API Auto Mocking Plugin
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/unirio-e61/TrabalhoES2/1.0.0
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/unir-542/second/1.0.0
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/unirio-ca4/bike/1.0.0
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/unirio-ca4/boke/1.0.0
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/unirio-e61/VaDeBike/1.0.0
info:
  version: 1.0.0
  title: bike
  description: Bicicletário
tags:
  - name: usuario
    description: Lida com interações relacionadas aos usuarios do sistema
  - name: equipamento
    description: Gerencia o equipamento do sistema
  - name: pagamento
    description: Lida com requisições de pagamento
  - name: aluguel
    description: Gerencia os aluguéis
paths:
    /equipamento/tranca/validar:
    post:
      tags:
        - equipamento
      security: 
        - funcionarioAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrancaDTO'
  
      responses:
        '201':
          description: "Tranca incluída"
        '400':
          description: "Somente o funcionário responsável pelo reparo pode devolver a tranca"
        '404':
          description: "Número de tranca inválida"
        
  /usuario/funcionario/email-tranca:
    post:
      tags:
        - usuario
      security: 
        - funcionarioAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrancaDTO'
  
      responses:
        '200':
          description: "Email enviado"
        '500':
          description: "Não foi possívem enviar email"
          
  /cliente/confirmar-email/token={token}:
    put:
      tags:
        - usuario
      description: Confirmar email cadastrado
      operationId: confirmaEmail
      parameters: 
        - name: token
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Cliente cadastrado
          
        '410':
          description: "Token expirado"
          
        '500':
          description: "Erro interno no sistema"
  /equipamento/repararBicicleta{trancaId}:
    put: 
      tags:
        - equipamento
      summary: Mudança do status da bicicleta para “reparo solicitado”.
      operationId: reparoBicicleta
      parameters:
        - name: trancaId
          in: path
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Bicicleta retirada para reparo.
        '400':
          description: Erro ao retirar bicicleta para reparo.

  /equipamento/aposentarBicicleta{trancaId}:
    put: 
      tags:
        - equipamento
      summary: Mudança do status da bicicleta para “aposentada”.
      operationId: aposentarBicicleta
      parameters:
        - name: trancaId
          in: path
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Bicicleta aposentada com sucesso.
        '400':
          description: Erro ao aposentar bicicleta.

  /funcionario/enviaDadosRetirada:
    post:
      tags:
        - usuario
      summary: Envia dados para o reparador.
      operationId: dadosBicicleta
      requestBody:
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/DadosRetiradaDTO'
      responses:
        '200':
          description: Email enviado com sucesso.
        '500':
          description: Erro ao enviar email.

components:
  securitySchemes:
    clienteAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    funcionarioAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    ClienteDTO:
      type: object
      properties:
        nome:
          type: string
        email:
          type: string
        senha:
          type: string
        cpf:
          type: string
          format: /d[11]
        data_nascimento:
          type: string
          format: date
        brasileiro:
          type: boolean
          description: if true brasileiro else estrangeiro
        foto_documento:
          type: string
          format: binary
        passaporte:
          $ref: '#/components/schemas/PassaporteDTO'
      oneOf:
        - required: [cpf]
          properties:
            brasileiro:
              enum: [true]
        - required: [passaporte]
          properties:
            brasileiro:
              enum: [false]
    PassaporteDTO:
      type: object
      properties:
        pais:
          pattern: '[A-Z]{2}'
          type: string
        numero:
          type: string
        data-validade:
          type: string
          format: date
    CartaoDeCreditoDTO:
      type: object
      properties:
        numero:
          type: string
          format: /d{16}
        nome:
          type: string
        codigo-seguranca:
          type: string
          format: /d{3,4}
        data-validade:
          type: string
          format: date
        cpf:
          type: string
          format: /d[11]
        
    #Cliente:
    #  allOf:
     #   - type: object
     #     properties:
     #       id:
      #        type: string
      #        format: uuid
       #     foto_documento:
      #        type: string
      #      status:
       #       type: string
       #       format: enum['ATIVO', 'INATIVO', 'CONFIRMACAO_PENDENTE']
      #  - $ref: '#/components/schemas/ClienteDTO'
    FuncionarioDTO:
      type: object
      properties:
        matricula:
          type: string
          example: INSERIR EXEMPLO
        email:
          type: string
          example: xxxx@dominio
        nome:
          type: string
          example: Arthur Campbell
        idade:
          type: integer
          example: 18
        funcao:
          type: string
          format: enum['administrativo', 'reparador']
          example: administrativo
      required:
        - matricula
        - email
        - nome
        - idade
        - funcao
    MatriculaDTO:
      type: object
      properties:
        matricula:
          type: string
          example: INSERIR EXEMPLO DE MATRICULA
    EmailDTO:
      type: object
      properties:
        email:
          type: string
          example: xxxx@dominio
    AluguelBicicletaDTO:
      type: object
      properties:
        id_bicicleta:
          type: integer
        data_inicio:
          type: string
          format: datetime
        id_totem:
          type: integer
        valor_centavos:
          type: integer
        id_cliente:
          type: integer
          
    CriaAluguelInicialBicicletaDTO:
      type: object
      properties:
        id_tranca:
          type: integer
          
    CriaAluguelDTO:
      type: object
      properties:
        id_tranca:
          type: integer
        id_cliente:
          type: integer
        id_bicicleta:
          type: integer
        data_hora:
          type: string
          format: date-time
        cartao_usado:
          $ref: '#/components/schemas/CartaoDeCreditoDTO'
        
    DevolveBicicletaDTO:
      allOf:
        - $ref: '#/components/schemas/AluguelBicicletaDTO'
        - type: object
          properties:
            numero_tranca:
              type: integer
            data_fim:
              type: string
              format: datetime
    TrancaDTO:
      type: object
      properties:
        numero-tranca:
          type: string
        matricula-reparador:
          type: string
        data:
          type: string
          format: date
    
    CriaBicicletaDTO:
      type: object
      properties:
        marca:
          type: string
        modelo:
          type: string
        ano:
          type: string
          format: year
        status:
          type: string
    ListaBicicletaDTO:
      allOf:
      - type: object
        properties:
          numero_bicicleta:
            type: string
          localizacao:
            type: string
            format: coordinates
          status:
            type: string
            format: enum['NOVA', 'DISPONÍVEL', 'EM_USO', 'REPARO_SOLICITADO', 'EM_REPARO', 'APOSENTADA']
      - $ref: '#/components/schemas/CriaBicicletaDTO'
    EditaBicicletaDTO:
      type: object
      properties:
        marca:
          type: string
        modelo:
          type: string
        ano:
          type: string
          format: year
    
    PagamentoDTO:
      type: object
      
      properties:
        valor:
          type: number
        equipamentoID:
          type: number
          
    DadosRetiradaDTO:
      type: object
      properties:
          retirada_tranca:
            type: string
            format: datetime
          funcionarioID:
            type: integer
          numero_bicicleta:
            type: string
    ReparoDTO:
      type: object
      properties:
        status:
          type: string
